# Renner model configuration file
# Use regex surrounded by slashes for all values unless otherwise specified
# Author: Amir Zeldes

[main]
### General function label settings ###
subject_func=/^nsubj$/
apposition_func=/appos/
possessive_func=/^poss$/
# Function for the second conjunct, NOT the conjunction; used to propagate function from first conjunct
conjunct_func=/^conj$/
# Dependency function identifying a coordinating conjunction
coord_func=/^cc$/
# Dependency function for determiners (if this function also matches functions in mod_func it will NOT used to rule out incompatible modifiers)
det_func=/^(pre)?det$/
# Decimal point separator in this language, e.g. period or comma
decimal_sep=.
# Thousands separator in this language, e.g. comma or period
thousand_sep=,

### Markable Detection ###
# POS categories to consider for markable heads
mark_head_pos=/^(NN?P?S?|PRP\$|PP\$)$/
# POS categories to consider for markable head only if dependency function is not (!) ...
# This is NOT a regular expression
pos_func_heads=CD!num;CD!number;CD!dep;CD!discourse;DT+nsubj;DT+dobj;DT+pobj;DT+prep_in;DT+prep_with;DT+prep_to;DT+prep_at;VB+cata;VV+cata;PRP!npadvmod;PP!npadvmod;$!dep;
# POS categories for verbs, only considered if seeking verbal antecedents for definite NPs with no antecedent is switched on
verb_head_pos=/^(V[BV][PZD]?)$/
# Dependency functions that rule out being a markable head
mark_forbidden_func=/amod|mark|punct|discourse|prep_as/
# Dependency functions that terminate markable sequence propagation
non_link_func=/aux|nsubj|cop|dep|punct|appos|discourse|parataxis|neg|possessive/
# Token values that terminate markable sequence propagation
non_link_tok=/[Ww]hen|[Ii]f/
# Dependency functions for which stoplist is checked to rule out spurious markables and markable extensions are forbidden
stop_func=/amod|nn|xcomp|mwe|dep/
# Postprocess parser input to ensure tokens inside known entities depend on the entity head?
postprocess_parser=True
# Func substitutions - replace function depending on POS and direction of head - NOT a regular expression
func_substitute_backward=NN/dep/appos/;NNS/dep/appos;NNP/dep/appos;NNPS/dep/appos;NP/dep/appos;NPS/dep/appos;CD/dep/appos
func_substitute_forward=NN/dep/nn/;NNS/dep/nn;NNP/dep/nn;NNPS/dep/nn;NP/dep/nn;NPS/dep/nn;CD/dep/num
# Affix tokens to strip from markable core text
core_prefixes=/^ ?([Tt]h([oe](se)?|is|at)|an?|some|all|many|[Mm]y|[Yy]our|[Hh]is|[Hh]er|[Oo]ur|[Tt]heir|[Ii]ts)( |$)/
core_suffixes=/ (('s|'|[Cc]orp\.?|Inc\.?|[Cc]o\.?|&) ?)*$/
# Functions that can be stripped when determining atomicity, e.g. if 'police department' is atomic, then a modified 'rich police department' is too
non_essential_mod_func=/amod|quantmod|num|det|prep_of|vmod/

### Entity Detection ###
# Default entity
default_entity=abstract
# Parts of speech for proper nouns
proper_pos=/NN?PS?/
# Parts of speech for pronouns
pronoun_pos=/PR?P\$?/
# What can an article look like which is not part of a person's actual name?
articles=/^([Aa]n?|[Tt]he)$/
# What can articles or modifiers look like which entail definiteness?
definite_articles=/^([Tt]h(e|is|at|[oe]se)|[Mm]y|[Yy]our|[Hh](is|er)|[Oo]ur|[Tt]heir|'|'s)$/
# Are people and place names in this language capitalized?
cap_names=True
# Ad hoc lemmatization rules - cascade of POS dependent string replace rules to use if no lemma is available in input
lemma_rules=NNP?S/xes$/x/;NNP?S/ches$/ch/;NNP?S/sses$/ss/;NNP?S/ies$/y/;NNP?S/s$//;NPS/xes$/x/;NPS/ches$/ch/;NPS/sses$/ss/;NPS/ies$/y/;NPS/s$//
# Edit morphology information - cascade of string replace rules to use on the morph field in conll data if available
morph_rules=_/_
# Auto lower case bahvior for lemmas when using lemma rules. Possible values: all, except_all_caps, none
auto_lower_lemma=except_all_caps
# Entity to guess for unknown acronyms
all_caps_entity=organization
# Maximum of substring suffix used on unknown heads to establish category (e.g. 4 catches -ness as usually abstract)
max_suffix_length=8

# Default name and agreement for persons and places - set to global default if not using
person_def_entity=person
place_def_entity=place
time_def_entity=time
object_def_entity=object
organization_def_entity=organization
quantity_def_entity=quantity
event_def_entity=event
abstract_def_entity=abstract
person_def_agree=male
place_def_agree=inanim
time_def_agree=inanim
organization_def_agree=inanim
object_def_agree=inanim
quantity_def_agree=plural

### Coreference Detection ###
# Modifier functions that require strictly identical heads for coreference
ident_mod_func=/^(poss|titlemod|prep_of)$/
# What POS categories should allow lemma matching of heads for coreference? e.g. /^NNS?$/ to allow singular and plural nouns to match based on lemma
lemma_match_pos=/none/
# Dependency functions that are interpreted as modifiers for compatible modifier, and other modifier checks
mod_func=/amod|nn|quantmod|num|det|prep_of|vmod/
# Tokens that mark opening and closing quotation for direct speech detection
open_quote=/^(["'”’]|``)$/
close_quote=/^(["'”’]|'')$/
# Tokens used to identify a question sentence
question_mark=/^\?$/
# Markables forbidden to have antecedents - semicolon separated patterns of initial (^x), final ($x) or head(@x) POS + text that rule out antecedent. 
# Use ! for negation, & for multiple criteria; use e.g. @none/none to switch off
no_antecedent=@NNS/.*&^!(DT|PR?P\$)/.*;@.*/^%$
# Are indefinite markables allowed to be anaphors (i.e. can they have antecedents)?
allow_indef_anaphor=False
# Are indefinite markables allowed to be anaphors via isa? (only used if allow_indef_anaphor is True)
allow_indef_isa=False
# Should we match Title Case entities to acronyms made of each token's initial letters?
match_acronyms=True
# Should it be possible for a later mention to include lexical modifiers not present in the antecedent?
no_new_modifiers=False
# Do proper noun modifiers have to match exactly across mentions? (NB: this may include proper modifiers such as Mr.!! Often leaving this False is better)
proper_mod_must_match=False

### Agreement Class Detection ###
pos_agree_mapping=NPS>plural;NNPS>plural;NNS>plural
agree_entity_mapping=female>person;male>person
default_agree=inanim
# Agreement classes compatible with unknown agreement - all other classes will require strict agreement
agree_with_unknown=/inanim|male|female/
# Strict disagree sets, e.g. male+female; note that putting singular/plural here disrupts possible isa-table connections between the two.
# Separate each pair internally with plus, and multiple pairs with semicolon
never_agree_pairs=male+female

# Agreement classes incompatible with person type entities
no_person_agree=/inanim/
# Agreement class for coordinate/aggregate entities; plain string NOT a regex (use underscore to assign no special class)
aggregate_agree=plural

### Postprocessing ###
remove_head_func=/nn/
remove_child_func=/cop/
remove_singletons=True
remove_cataphora=True
add_appos_envelopes=True
seek_verb_for_defs=True
stemmer_deletes=/((:?at)ion|ment|ed?|ing|th|al|e?s)$/
remove_coordinate_envelopes=True